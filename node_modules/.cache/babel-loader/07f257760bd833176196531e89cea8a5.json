{"ast":null,"code":"import _objectSpread from \"/Users/nickciambrone/Desktop/insight-bets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nexport const addItemToCart = (cartItems, cartItemToAdd) => {\n  //existingCartItem will take the value of any element in the cartItems array that it can \"find\", where the \n  //cartItem.id == the cartItemToAdd.id\n  const existingCartItem = cartItems.find(cartItem => cartItem.id == cartItemToAdd.id); //if there is one, we copy that element into the existingCartItem and so this if block fires,\n  //if there isnt one, it will assume the value of null\n\n  if (existingCartItem) {\n    //ok so if one does actually exist already, loop over the cartItems array (a property of the state)\n    //and return the same array, but wherever the cartItem.id is = to the existingcartItem.id, increment the \n    //quantity by 1\n    return cartItems.map(cartItem => cartItem.id == existingCartItem.id ? _objectSpread({}, cartItem, {\n      quantity: cartItem.quantity + 1\n    }) : cartItem);\n  } //if no item exists, then just return an array with all the existing elements of cartItems,\n  //but append a new object with all of the key:value pairs of cartItemToAdd with a new key:value pair\n  //of quantity:1\n\n\n  return [...cartItems, _objectSpread({}, cartItemToAdd, {\n    quantity: 1\n  })];\n};","map":{"version":3,"sources":["/Users/nickciambrone/Desktop/insight-bets/src/redux/cart/cart.utils.js"],"names":["addItemToCart","cartItems","cartItemToAdd","existingCartItem","find","cartItem","id","map","quantity"],"mappings":";AAAA,OAAO,MAAMA,aAAa,GAAG,CAACC,SAAD,EAAYC,aAAZ,KAA6B;AACtD;AACA;AACA,QAAMC,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CAAeC,QAAQ,IAAGA,QAAQ,CAACC,EAAT,IAAcJ,aAAa,CAACI,EAAtD,CAAzB,CAHsD,CAItD;AACA;;AACA,MAAGH,gBAAH,EAAoB;AAChB;AACA;AACA;AACA,WAAOF,SAAS,CAACM,GAAV,CAAcF,QAAQ,IAAKA,QAAQ,CAACC,EAAT,IAAeH,gBAAgB,CAACG,EAAhC,qBAAyCD,QAAzC;AAAmDG,MAAAA,QAAQ,EAACH,QAAQ,CAACG,QAAT,GAAkB;AAA9E,SAAmFH,QAA9G,CAAP;AACH,GAXqD,CAatD;AACA;AACA;;;AACA,SAAO,CAAC,GAAGJ,SAAJ,oBAAoBC,aAApB;AAAmCM,IAAAA,QAAQ,EAAC;AAA5C,KAAP;AAEH,CAlBM","sourcesContent":["export const addItemToCart = (cartItems, cartItemToAdd) =>{\n    //existingCartItem will take the value of any element in the cartItems array that it can \"find\", where the \n    //cartItem.id == the cartItemToAdd.id\n    const existingCartItem = cartItems.find(cartItem=> cartItem.id ==cartItemToAdd.id)\n    //if there is one, we copy that element into the existingCartItem and so this if block fires,\n    //if there isnt one, it will assume the value of null\n    if(existingCartItem){\n        //ok so if one does actually exist already, loop over the cartItems array (a property of the state)\n        //and return the same array, but wherever the cartItem.id is = to the existingcartItem.id, increment the \n        //quantity by 1\n        return cartItems.map(cartItem =>  cartItem.id == existingCartItem.id ? {...cartItem, quantity:cartItem.quantity+1} : cartItem)\n    }\n\n    //if no item exists, then just return an array with all the existing elements of cartItems,\n    //but append a new object with all of the key:value pairs of cartItemToAdd with a new key:value pair\n    //of quantity:1\n    return [...cartItems, { ...cartItemToAdd, quantity:1 }]\n\n}"]},"metadata":{},"sourceType":"module"}